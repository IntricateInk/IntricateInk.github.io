{"version":3,"sources":["data/DocumentData.ts","data/FolderUtil.ts","data/FolderData.ts","data/UserData.ts","network/Serializer.ts","network/MockService.ts","utill/KeyCode.ts","component/folder-tree/LabelComponent.tsx","component/DocumentLabel.tsx","component/FolderLabel.tsx","component/HeaderLabel.tsx","component/document-menu/FieldComponent.tsx","component/document-menu/DocumentMenu.tsx","component/folder-tree/Indent.tsx","component/folder-menu/FolderMenu.tsx","component/folder-tree/FolderComponent.tsx","page/FolderPage.tsx","page/LoginPage.tsx","main.tsx","index.tsx"],"names":["DocumentState","DocumentFieldType","DocumentData","name","parent","documentState","fields","setDocumentState","newState","getDocumentState","None","isFilled","Filled","delete","removeChild","Object","values","every","field","value","length","this","addChild","createEmptyField","fieldType","Image","type","Pdf","String","getColorFromDocumentState","Approved","Rejected","getDocumentStateCount","folder","countFolder","document","predicate","count","children","forEach","child","FolderData","UserType","isOpen","users","folderName","filter","find","toggleOpen","undefined","c","push","getPath","concat","getDepth","getApproved","getUsers","addUser","user","add","removeUser","Set","UserData","userType","serialize","item","Array","from","map","data","state","status","serializeDocument","deserialize","obj","deserializeFolder","deserializeDocument","ALL_USERS","i","parseRaw","raw","depth","keys","key","val","out","entries","createEmptyFields","Owner","Contractor","template","RawProject","KeyCode","LabelComponent","withStyles","theme","createStyles","container","width","height","overflowX","display","flexDirection","folderButton","flexGrow","justifyContent","padding","text","paddingLeft","lineHeight","textOverflow","whiteSpace","textAlign","textTransform","textInput","optionIcon","props","useState","isRenaming","setRenaming","doRename","ev","onRename","currentTarget","body","icon","Input","className","classes","inputProps","autoFocus","defaultValue","label","onBlur","onKeyDown","keyCode","ENTER","Typography","folderButtonProps","onClick","Button","IconButton","Edit","onDelete","Delete","DocumentLabel","FileCopy","style","color","FolderLabel","iconColor","FolderOpen","Folder","renderCount","title","Tooltip","HeaderLabel","headerContainer","parentLabel","labelSeperator","legendContainer","flexShrink","alignContent","onSelect","newName","renderSelfLabel","T","getFolderDocumentCount","renderFolderLegend","FieldComponent","input","fieldValueContainer","fieldValueLabel","fieldName","saveFileField","onValueUpdate","onNameUpdate","fieldData","variant","accept","onChange","e","file","target","files","Promise","resolve","reject","reader","FileReader","onload","event","result","readAsDataURL","then","href","download","RenderInput","DocumentMenuRenderer","setDocumentFieldValue","newValue","onUpdate","setDocumentFieldName","isProcessing","isContractor","tableContainer","Table","table","TableBody","idx","React","Component","DocumentMenu","overflow","overflowY","scrollbarWidth","tableLayout","border","Indent","FolderMenu","userTitleLabel","userContainer","userText","userDeleteIcon","has","onDeleteFolder","onRenameFolder","onRenameDocument","onDeleteDocument","menuAnchor","setMenuAnchor","menuItems","onCreateFolder","onCreateProject","Add","templates","submissionType","systemName","onCreateDocument","menuClose","menu","Menu","anchorEl","keepMounted","open","Boolean","onClose","MenuItem","disabled","RenderCreateButton","onAddUser","onRemoveUser","RenderUsers","FolderRenderer","onFolderClick","forceUpdate","logoutButton","onLogout","ExitToApp","FolderComponent","FolderPage","foldertree","selected","createProject","addFolderToFolder","addDocumentToFolder","rename","deleteDocument","deleteFolder","onDocumentUpdate","root","LoginPage","margin","alignItems","verticalAlign","padDiv","formContainer","username","setUserName","password","setPassword","isFailedLogin","setFailedLogin","TextField","autoComplete","Fab","size","onLogin","MainComponent","componentDidMount","doLogin","setState","prevState","localStorage","getItem","JSON","parse","project1","getUserFolder","doLogout","selectDocument","renameDocument","project","createFromTemplate","serialized","stringify","setItem","saveData","render","Main","createMuiTheme","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.42263787.chunk.js","sourcesContent":["import { FolderData } from \"./FolderData\";\r\nimport { Color } from \"csstype\";\r\n\r\nexport enum DocumentState {\r\n    None = \"None\",\r\n    Filled = \"Filled\",\r\n    Approved = \"Approved\",\r\n    Rejected = \"Rejected\",\r\n};\r\n\r\nexport enum DocumentFieldType {\r\n    String = \"String\",\r\n    Pdf = \"PDF\",\r\n    Image = \"Image\",\r\n}\r\n\r\nexport type DocumentFieldString = {\r\n    type: DocumentFieldType.String;\r\n}\r\n\r\nexport type DocumentFieldPdf = {\r\n    type: DocumentFieldType.Pdf;\r\n    name: string;\r\n}\r\n\r\nexport type DocumentFieldImage = {\r\n    type: DocumentFieldType.Image;\r\n    name: string;\r\n}\r\n\r\nexport type DocumentField = (\r\n    DocumentFieldString |\r\n    DocumentFieldPdf |\r\n    DocumentFieldImage\r\n) & {\r\n    value: string;\r\n};\r\n\r\nexport class DocumentData {\r\n\r\n    public name: string;\r\n    public fields: { [key: string]: DocumentField };\r\n\r\n    public parent: FolderData;\r\n\r\n    private documentState: DocumentState.None | DocumentState.Approved | DocumentState.Rejected;\r\n\r\n    constructor(name: string, parent: FolderData, documentState: DocumentState.None | DocumentState.Approved | DocumentState.Rejected, fields: { [key: string]: DocumentField }) {\r\n        this.name = name;\r\n        this.fields = fields;\r\n\r\n        this.parent = parent;\r\n        this.documentState = documentState;\r\n\r\n        this.parent.addChild(this);\r\n    }\r\n\r\n    public setDocumentState = (newState: DocumentState.None | DocumentState.Approved | DocumentState.Rejected): void => {\r\n        this.documentState = newState;\r\n    }\r\n\r\n    public getDocumentState = (): DocumentState => {\r\n        if (this.documentState === DocumentState.None && this.isFilled()) return DocumentState.Filled;\r\n        return this.documentState;\r\n    }\r\n\r\n    public delete = (): void => {\r\n        this.parent.removeChild(this);\r\n    }\r\n\r\n    public isFilled = (): boolean => {\r\n        return Object.values(this.fields).every(field => field.value.length !== 0);\r\n    }\r\n}\r\n\r\nexport function createFromTemplate(template: DocumentData, parent: FolderData): DocumentData {\r\n    const fields: { [key: string]: DocumentField } = {};\r\n\r\n    Object.entries(template.fields).forEach(([key, field]) => {\r\n        fields[key] = createEmptyField(field.type);\r\n    });\r\n\r\n    return new DocumentData(template.name, parent, DocumentState.None, fields);\r\n}\r\n\r\nexport function createEmptyFields(obj: any): { [key: string]: DocumentField } {\r\n    const out: { [key: string]: DocumentField } = {};\r\n\r\n    Object.entries(obj).forEach(([name, type]) => {\r\n        out[name] = createEmptyField(type as any);\r\n    });\r\n\r\n    return out;\r\n}\r\n\r\nexport function createEmptyField(fieldType: DocumentFieldType): DocumentField {\r\n    switch (fieldType) {\r\n        case DocumentFieldType.Image:\r\n            return {\r\n                type: DocumentFieldType.Image,\r\n                value: '',\r\n                name: '',\r\n            };\r\n\r\n        case DocumentFieldType.Pdf:\r\n            return {\r\n                type: DocumentFieldType.Pdf,\r\n                value: '',\r\n                name: '',\r\n            };\r\n        \r\n        case DocumentFieldType.String:\r\n            return {\r\n                type: DocumentFieldType.String,\r\n                value: '',\r\n            };\r\n    }\r\n}\r\n\r\nexport function getColorFromDocumentState(documentState: DocumentState): Color {\r\n    switch (documentState) {\r\n        case DocumentState.Approved:\r\n            return 'green';\r\n\r\n        case DocumentState.Rejected:\r\n            return 'red';\r\n\r\n        case DocumentState.Filled:\r\n            return 'gray';\r\n\r\n        case DocumentState.None:\r\n            return 'black';\r\n    }\r\n}\r\n","import { FolderData } from \"./FolderData\";\r\nimport { DocumentState, DocumentData } from \"./DocumentData\";\r\n\r\nexport function getFolderDocumentCount(folder: FolderData): number {\r\n    return countFolder(folder, () => true);\r\n}\r\n\r\nexport function getDocumentStateCount(folder: FolderData, documentState: DocumentState): number {\r\n    return countFolder(folder, document => document.getDocumentState() === documentState);\r\n}\r\n\r\nfunction countFolder(folder: FolderData, predicate: (document: DocumentData) => boolean): number {\r\n    let count: number = 0;\r\n\r\n    folder.children.forEach(child => {\r\n        if (child instanceof FolderData) count += countFolder(child, predicate);\r\n        else if (predicate(child)) count += 1;\r\n    });\r\n\r\n    return count;\r\n}","import { Color } from \"csstype\";\r\nimport { DocumentData, DocumentState } from \"./DocumentData\";\r\nimport { UserData } from \"./UserData\";\r\nimport { getDocumentStateCount } from \"./FolderUtil\";\r\n\r\nexport class FolderData {\r\n\r\n    public name: string;\r\n    public parent: FolderData | null;\r\n    public children: (FolderData | DocumentData)[];\r\n    public isOpen: boolean;\r\n\r\n    private users: Set<UserData>;\r\n\r\n    constructor(name: string) {\r\n        this.name = name;\r\n        this.parent = null;\r\n        this.children = [];\r\n        this.isOpen = true;\r\n\r\n        this.users = new Set();\r\n    }\r\n\r\n    public folder = (folderName: string): FolderData | undefined => {\r\n        return (this.children.filter(child => child instanceof FolderData) as FolderData[])\r\n            .find(child => child.name === folderName);\r\n    }\r\n\r\n    public delete = (): void => {\r\n        if (this.parent !== null) {\r\n            this.parent.removeChild(this);\r\n        }\r\n    }\r\n\r\n    public toggleOpen = (isOpen?: boolean): void => {\r\n        this.isOpen = isOpen === undefined ? !this.isOpen : isOpen;\r\n    }\r\n\r\n    public removeChild = (child: FolderData | DocumentData): void => {\r\n        child.parent = null;\r\n        this.children = this.children.filter(c => c !== child);\r\n    }\r\n\r\n    public addChild = (child: FolderData | DocumentData): void => {\r\n        child.parent = this;\r\n        this.children.push(child);\r\n    }\r\n\r\n    public getPath = (): FolderData[] => {\r\n        if (this.parent === null) return [this];\r\n        return this.parent.getPath().concat([this]);\r\n    }\r\n\r\n    public getDepth = (): number => {\r\n        if (this.parent === null) return 0;\r\n        return this.parent.getDepth() + 1;\r\n    }\r\n\r\n    public getApproved = (): boolean => {\r\n        return this.children\r\n            .every(child =>\r\n                child instanceof FolderData ?\r\n                    child.getApproved() :\r\n                    child.getDocumentState() === DocumentState.Approved\r\n            );\r\n    }\r\n\r\n    public getUsers = (): Set<UserData> => {\r\n        if (this.parent === null) return this.users;\r\n        return this.parent.getUsers();\r\n    }\r\n\r\n    public addUser = (user: UserData): void => {\r\n        this.users.add(user);\r\n    }\r\n\r\n    public removeUser = (user: UserData): void => {\r\n        this.users.delete(user);\r\n    }\r\n}\r\n\r\nexport function getFolderColor(folder: FolderData): Color {\r\n    if (folder.getApproved()) return 'green';\r\n    else if (getDocumentStateCount(folder, DocumentState.Rejected) > 0) return 'red';\r\n    else if (getDocumentStateCount(folder, DocumentState.None) === 0) return 'gray';\r\n    return 'black';\r\n}\r\n","export enum UserType {\r\n    Owner,\r\n    Contractor,\r\n}\r\n\r\nexport class UserData {\r\n\r\n    public name: string;\r\n    public userType: UserType;\r\n\r\n    constructor(name: string, userType: UserType) {\r\n        this.name = name;\r\n        this.userType = userType;\r\n    }\r\n\r\n}","import { DocumentData, DocumentField, DocumentState } from \"../data/DocumentData\";\r\nimport { FolderData } from \"../data/FolderData\";\r\nimport { UserData } from \"../data/UserData\";\r\nimport { ALL_USERS } from \"./MockService\";\r\n\r\nexport function serialize(item: FolderData | DocumentData): object {\r\n    if (item instanceof FolderData) return serializeFolder(item);\r\n    return serializeDocument(item);\r\n}\r\n\r\nfunction serializeFolder(folder: FolderData): object {\r\n    return {\r\n        type: 'folder',\r\n        name: folder.name,\r\n        users: Array.from(folder.getUsers()).map(user => user.name),\r\n        data: folder.children.map(serialize),\r\n    };\r\n}\r\n\r\nfunction serializeDocument(document: DocumentData): object {\r\n    const state = document.getDocumentState();\r\n    return {\r\n        type: 'document',\r\n        name: document.name,\r\n        status: state === DocumentState.Filled ? DocumentState.None : state,\r\n        fields: document.fields,\r\n    };\r\n}\r\n\r\nfunction deserialize(parent: FolderData, obj: any): FolderData | DocumentData {\r\n    switch (obj.type) {\r\n        case 'folder':\r\n            const child = deserializeFolder(obj);\r\n            parent.addChild(child);\r\n            return child;\r\n        \r\n        case 'document':\r\n        default:\r\n            return deserializeDocument(parent, obj);\r\n    }\r\n}\r\n\r\nexport function deserializeFolder(obj: any): FolderData {\r\n    const name: string = obj.name;\r\n    const folder = new FolderData(name);\r\n\r\n    const users: UserData[] = obj.users.map((user: string) => ALL_USERS[user]);\r\n    users.forEach(folder.addUser);\r\n\r\n    obj.data.forEach((i: any) => deserialize(folder, i));\r\n\r\n    return folder;\r\n}\r\n\r\nfunction deserializeDocument(parent: FolderData, obj: any): DocumentData {\r\n    const name: string = obj.name;\r\n    const status = obj.status;\r\n    const fields: { [key: string]: DocumentField } = obj.fields;\r\n    return new DocumentData(name, parent, status, fields);\r\n}\r\n","import { createEmptyFields, DocumentData, DocumentState } from '../data/DocumentData';\r\nimport { FolderData } from '../data/FolderData';\r\nimport { UserData, UserType } from '../data/UserData';\r\nimport RawProject from './RawProject.json';\r\nimport { deserializeFolder, serialize } from './Serializer';\r\n\r\nexport function getUserFolder(username: string): FolderData {\r\n    // localStorage.clear();\r\n    const raw: string | null = localStorage.getItem('data');\r\n\r\n    if (raw !== null) {\r\n        return deserializeFolder(JSON.parse(raw));\r\n    } else {\r\n        const folder: FolderData = new FolderData(username);\r\n        const project1: FolderData = parseRaw('Project 1', RawProject, 0);\r\n        folder.addChild(project1);\r\n        return folder;\r\n    }\r\n}\r\n\r\n\r\nexport function saveData(data: FolderData): void {\r\n    const serialized: string = JSON.stringify(serialize(data));\r\n    localStorage.setItem('data', serialized);\r\n}\r\n\r\nfunction parseRaw(name: string, raw: { [key: string]: any }, depth: number): FolderData {\r\n    const parent: FolderData = new FolderData(name);\r\n    parent.toggleOpen(false);\r\n\r\n    Object.keys(raw).forEach(key => {\r\n        const val = raw[key];\r\n\r\n        if (depth === 2) return new DocumentData(key, parent, DocumentState.None, createEmptyFields(val));\r\n        parent.addChild(parseRaw(key, val, depth + 1));\r\n        parent.toggleOpen(true);\r\n    });\r\n\r\n    return parent;\r\n}\r\n\r\nexport const ALL_USERS: { [key: string]: UserData } = {\r\n    'BI_1': new UserData('BI_1', UserType.Owner),\r\n    'Contractor_1': new UserData('Contractor_1', UserType.Contractor),\r\n    'Contractor_2': new UserData('Contractor_2', UserType.Contractor),\r\n};\r\n\r\nconst template: FolderData = parseRaw('Template', RawProject, 0);\r\n\r\nexport function getSubmissionTypes(): string[] {\r\n    return [\r\n        \"Air-Conditioning and Mechanical Ventilation (ACMV)\",\r\n        \"Fire Detection and Protection System\",\r\n        \"Plumbing and Sanitary System\",\r\n        \"Fuel Storage and Distribution System\",\r\n        \"Low Voltage System\",\r\n        \"High Voltage System\",\r\n    ];\r\n}\r\n\r\nexport function getTemplates(submissionType: string, systemName: string): DocumentData[] {\r\n    return template\r\n        .folder(submissionType)!\r\n        .folder(systemName)!\r\n        .children.filter(child => child instanceof DocumentData) as DocumentData[];\r\n}\r\n","export enum KeyCode {\r\n    ENTER = 13,\r\n}\r\n","import { Button, createStyles, Input, Theme, Typography, withStyles, WithStyles, IconButton } from \"@material-ui/core\";\r\nimport React, { useState, ReactElement } from \"react\";\r\nimport { KeyCode } from \"../../utill/KeyCode\";\r\nimport { Delete, Edit } from \"@material-ui/icons\";\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n        overflowX: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n\r\n    folderButton: {\r\n        flexGrow: 1,\r\n        justifyContent: 'left',\r\n        padding: '6px 8px',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    \r\n    text: {\r\n        flexGrow: 1,\r\n        paddingLeft: '4px',\r\n        lineHeight: 1.5,\r\n        overflowX: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n        textAlign: 'left',\r\n        textTransform: 'none',\r\n    },\r\n\r\n    textInput: {\r\n        padding: 0,\r\n    },\r\n\r\n    optionIcon: {\r\n        height: '36px',\r\n        width: '36px',\r\n    },\r\n\r\n});\r\n\r\ntype Props = WithStyles & {\r\n    icon: React.ReactElement,\r\n    label: string;\r\n    onClick?(): void;\r\n    onRename?(newName: string): void;\r\n    onDelete?(): void;\r\n}\r\n\r\nfunction RenderLabel(props: Props) {\r\n\r\n    const [isRenaming, setRenaming] = useState(false);\r\n    const doRename = (ev: React.KeyboardEvent<HTMLInputElement | HTMLTextAreaElement> |\r\n        React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\r\n        setRenaming(false);\r\n        if (props.onRename !== undefined) props.onRename(ev.currentTarget.value);\r\n    }\r\n\r\n    const body = (\r\n        <>\r\n            { props.icon }\r\n            {\r\n                isRenaming ? (\r\n                    <Input\r\n                        className={ props.classes.text }\r\n                        inputProps={ { className: props.classes.textInput } }\r\n                        autoFocus\r\n                        type=\"text\"\r\n                        defaultValue={ props.label }\r\n                        onBlur={ doRename }\r\n                        onKeyDown={ (ev) => { if (ev.keyCode === KeyCode.ENTER) doRename(ev); } }\r\n                    />\r\n                ) : (\r\n                    <Typography\r\n                        className={ props.classes.text }\r\n                    >\r\n                        { props.label }\r\n                    </Typography>\r\n                )\r\n            }\r\n        </>\r\n    );\r\n\r\n    const folderButtonProps = {\r\n        key: 0,\r\n        className: props.classes.folderButton,\r\n        children: [body],\r\n    };\r\n\r\n    const folderButton: ReactElement = !(props.onClick || props.onRename) || isRenaming ? (\r\n        <div { ...folderButtonProps }/>\r\n    ) : (\r\n        <Button\r\n            onClick={ props.onClick ? props.onClick : () => setRenaming(true) }\r\n            { ...folderButtonProps }\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className={ props.classes.container }>\r\n            { folderButton }\r\n            { props.onClick && props.onRename ?\r\n                <IconButton\r\n                    key={ 1 }\r\n                    className={ props.classes.optionIcon }\r\n                    onClick={ () => setRenaming(true) }\r\n                >\r\n                    <Edit/>\r\n                </IconButton>\r\n                :\r\n                null\r\n            }\r\n            { props.onDelete ?\r\n                <IconButton\r\n                    key={ 2 }\r\n                    className={ props.classes.optionIcon }\r\n                    onClick={ props.onDelete }\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n                :\r\n                null\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const LabelComponent = withStyles(styles)(RenderLabel);\r\n","import { FileCopy } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport { DocumentData, getColorFromDocumentState } from \"../data/DocumentData\";\r\nimport { LabelComponent } from \"./folder-tree/LabelComponent\";\r\n\r\ntype Props = {\r\n    data: DocumentData;\r\n    label?: string;\r\n    onClick?(): void;\r\n    onRename?(newName: string): void;\r\n    onDelete?(): void;\r\n}\r\n\r\nfunction renderLabel(props: Props) {\r\n    return (\r\n        <LabelComponent\r\n            icon={ <FileCopy style={ { color: getColorFromDocumentState(props.data.getDocumentState()) } }/> }\r\n            label={ props.label || props.data.name }\r\n            onClick={ props.onClick }\r\n            onRename={ props.onRename }\r\n            onDelete={ props.onDelete }\r\n        />\r\n    );\r\n}\r\n\r\nexport const DocumentLabel = renderLabel;\r\n","import { Folder, FolderOpen } from \"@material-ui/icons\";\r\nimport { Color } from \"csstype\";\r\nimport React from \"react\";\r\nimport { FolderData, getFolderColor } from \"../data/FolderData\";\r\nimport { LabelComponent } from \"./folder-tree/LabelComponent\";\r\n\r\ntype Props = {\r\n    data: FolderData | null;\r\n    onClick?(): void;\r\n    onRename?(newName: string): void;\r\n    onDelete?(): void;\r\n}\r\n\r\nfunction renderLabel(props: Props) {\r\n    if (props.data === null) return null;\r\n\r\n    const iconColor: Color = getFolderColor(props.data);\r\n    const isOpen: boolean = props.data.isOpen;\r\n\r\n    return (\r\n        <LabelComponent\r\n            icon={ isOpen ? <FolderOpen style={ { color: iconColor } }/> : <Folder style={ { color: iconColor } }/> }\r\n            label={ props.data.name }\r\n            onClick={ props.onClick }\r\n            onRename={ props.onRename }\r\n            onDelete={ props.onDelete }\r\n        />\r\n    );\r\n}\r\n\r\nexport const FolderLabel = renderLabel;\r\n\r\n","import { createStyles, IconButton, Theme, Typography, withStyles, WithStyles, Tooltip } from \"@material-ui/core\";\r\nimport { Delete } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport { DocumentData, DocumentState, getColorFromDocumentState } from \"../data/DocumentData\";\r\nimport { FolderData } from \"../data/FolderData\";\r\nimport { getDocumentStateCount, getFolderDocumentCount } from \"../data/FolderUtil\";\r\nimport { DocumentLabel } from \"./DocumentLabel\";\r\nimport { FolderLabel } from \"./FolderLabel\";\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n    headerContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n\r\n    parentLabel: {\r\n        flexGrow: 0,\r\n    },\r\n\r\n    labelSeperator: {\r\n        lineHeight: '36px',\r\n    },\r\n\r\n    legendContainer: {\r\n        lineHeight: '36px',\r\n        flexShrink: 0,\r\n        display: 'ruby',\r\n        alignContent: 'center',\r\n        padding: '0 8px',\r\n    },\r\n\r\n    icon: {\r\n        height: '36px',\r\n        width: '36px',\r\n    }\r\n    \r\n});\r\n\r\ntype Props<T extends FolderData | DocumentData> = WithStyles & {\r\n    data: T;\r\n    onSelect(document: FolderData | DocumentData | null): void;\r\n    onDelete?(self: T): void;\r\n    onRename?(self: T, newName: string): void;\r\n}\r\n\r\nfunction renderLabel<T extends FolderData | DocumentData>(props: Props<T>) {\r\n    return (\r\n        <div className={ props.classes.headerContainer }>\r\n            { props.data.parent === null ? null : (\r\n                <>\r\n                    <div className={ props.classes.parentLabel }>\r\n                        <FolderLabel\r\n                            data={ props.data.parent }\r\n                            onClick={ () => props.onSelect(props.data.parent) }\r\n                        />\r\n                    </div>\r\n                    <Typography className={ props.classes.labelSeperator }>>></Typography>\r\n                </>\r\n            ) }\r\n\r\n            { renderSelfLabel(props) }\r\n\r\n            { props.data instanceof FolderData ? renderFolderLegend(props, props.data) : null }\r\n\r\n            { (props.data instanceof FolderData && props.data.getDepth() === 2) || props.onDelete === undefined ? null :\r\n                <IconButton\r\n                    className={ props.classes.icon }\r\n                    onClick={ () => props.onDelete!(props.data) }\r\n                >\r\n                    <Delete/>\r\n                </IconButton>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction renderFolderLegend<T extends FolderData | DocumentData>(props: Props<T>, folder: FolderData) {\r\n\r\n    const T: number = getFolderDocumentCount(folder);\r\n\r\n    return (\r\n        <div className={ props.classes.legendContainer }>\r\n            { renderCount(\"Approved\", folder, DocumentState.Approved) }{\" + \"}\r\n            { renderCount(\"Rejected\", folder, DocumentState.Rejected) }{\" + \"}\r\n            { renderCount(\"Filled\", folder, DocumentState.Filled) }{\" + \"}\r\n            { renderCount(\"Pending\", folder, DocumentState.None) }{\" = \"}\r\n            <Tooltip title=\"Total\"><Typography style={ { color: \"black\" } }>{ T }</Typography></Tooltip>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction renderCount(title: string, folder: FolderData, documentState: DocumentState) {\r\n    return (\r\n        <Tooltip title={ title }>\r\n            <Typography style={ { color: getColorFromDocumentState(documentState) } }>\r\n                { getDocumentStateCount(folder, documentState) }\r\n            </Typography>\r\n        </Tooltip>\r\n    );\r\n}\r\n\r\nfunction renderSelfLabel<T extends FolderData | DocumentData>(props: Props<T>) {\r\n    if (props.data instanceof DocumentData) {\r\n        return (\r\n            <DocumentLabel\r\n                data={ props.data }\r\n                onRename={ props.onRename ? (newName) => props.onRename!(props.data, newName) : undefined }\r\n            />\r\n        )\r\n    } else if (props.data instanceof FolderData) {\r\n        return (\r\n            <FolderLabel\r\n                data={ props.data }\r\n                onRename={ props.onRename ? (newName) => props.onRename!(props.data, newName) : undefined }\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nexport const HeaderLabel = withStyles(styles)(renderLabel);\r\n\r\n","import { Button, createStyles, Input, Theme, Typography, withStyles, WithStyles } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { DocumentField, DocumentFieldType } from '../../data/DocumentData';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n    input: {\r\n        width: '100%',\r\n    },\r\n\r\n    fieldValueContainer: {\r\n        width: '100%',\r\n        height: '24px',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n\r\n    fieldValueLabel: {\r\n        paddingLeft: '8px',\r\n        flexGrow: 1,\r\n    },\r\n\r\n});\r\n\r\ntype Props = WithStyles & {\r\n    fieldName: string,\r\n    fieldData: DocumentField,\r\n    onValueUpdate(newValue: string): void,\r\n    onNameUpdate(newName: string): void,\r\n};\r\n\r\nfunction RenderFieldComponent(props: Props) {\r\n    return (\r\n        <tr>\r\n            <td>\r\n                <Typography>{ props.fieldName }</Typography>\r\n            </td>\r\n\r\n            <td>\r\n                { RenderInput(props) }\r\n            </td>\r\n        </tr>\r\n    );\r\n}\r\n\r\nfunction RenderInput(props: Props) {\r\n\r\n    function saveFileField(field: { name: string, value: string }) {\r\n        props.onValueUpdate(field.value);\r\n        props.onNameUpdate(field.name);\r\n    }\r\n\r\n    switch (props.fieldData.type) {\r\n        case DocumentFieldType.Image:\r\n        case DocumentFieldType.Pdf:\r\n            return (\r\n                <div className={ props.classes.fieldValueContainer }>\r\n                    <Button variant=\"outlined\">\r\n                        <label>\r\n                            <Typography>Upload</Typography>\r\n                            <input\r\n                                type=\"file\"\r\n                                style={ { display: 'none' } }\r\n                                accept={ props.fieldData.type === DocumentFieldType.Pdf ? \".pdf\" : \"image/*\" }\r\n                                onChange={ e => loadFile(e.target.files![0]).then(saveFileField) }\r\n                            />\r\n                        </label>\r\n                    </Button>\r\n\r\n                    { props.fieldData.value.length === 0 ? <div className={ props.classes.fieldValueLabel }/> :\r\n                        <a\r\n                            className={ props.classes.fieldValueLabel }\r\n                            href={ props.fieldData.value }\r\n                            download={ props.fieldData.name }\r\n                        >\r\n                            <Typography>\r\n                                { props.fieldData.name }\r\n                            </Typography>\r\n                        </a>\r\n                    }\r\n                </div>\r\n            );\r\n\r\n        default:\r\n            return (\r\n                <Input\r\n                    className={ props.classes.input }\r\n                    value={ props.fieldData.value || '' }\r\n                    onChange={ ev => props.onValueUpdate(ev.currentTarget.value) }\r\n                />\r\n            );\r\n    }\r\n}\r\n\r\nfunction loadFile(file: File): Promise<{ name: string, value: string }> {\r\n    return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = function(event) {\r\n            const result: string = event.target!.result as string;\r\n            resolve({\r\n                name: file.name,\r\n                value: result,\r\n            });\r\n        };\r\n        reader.readAsDataURL(file);\r\n    });\r\n}\r\n\r\nexport const FieldComponent = withStyles(styles)(RenderFieldComponent);\r\n","import { Button, createStyles, Table, TableBody, Theme, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { DocumentData, DocumentField, DocumentFieldType, DocumentState } from \"../../data/DocumentData\";\r\nimport { FolderData } from \"../../data/FolderData\";\r\nimport { HeaderLabel } from \"../HeaderLabel\";\r\nimport { FieldComponent } from \"./FieldComponent\";\r\nimport { UserData, UserType } from \"../../data/UserData\";\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    \r\n    container: {\r\n        width: '100%',\r\n        height: '100%',\r\n        overflow: 'hidden',\r\n    },\r\n\r\n    tableContainer: {\r\n        height: '100%',\r\n        overflowY: 'scroll',\r\n        scrollbarWidth: \"thin\",\r\n    },\r\n\r\n    table: {\r\n        width: '100%',\r\n        tableLayout: 'fixed',\r\n        border: 'solid transparent 16px',\r\n    },\r\n\r\n});\r\n\r\ntype Props = WithStyles & {\r\n    data: DocumentData;\r\n    user: UserData;\r\n    onUpdate(): void;\r\n    onDelete(document: DocumentData): void;\r\n    onSelect(document: FolderData | DocumentData | null): void;\r\n    onRename(document: FolderData | DocumentData, newName: string): void;\r\n};\r\n\r\nclass DocumentMenuRenderer extends React.Component<Props> {\r\n\r\n    public render(): React.ReactElement {\r\n        const documentState: DocumentState = this.props.data.getDocumentState();\r\n        const isProcessing: boolean = documentState !== DocumentState.None && documentState !== DocumentState.Filled;\r\n        const isContractor: boolean = this.props.user.userType === UserType.Contractor;\r\n\r\n        return (\r\n            <div className={ this.props.classes.container }>\r\n                <HeaderLabel\r\n                    data={ this.props.data }\r\n                    onDelete={ isContractor ? undefined : this.props.onDelete }\r\n                    onSelect={ this.props.onSelect }\r\n                    onRename={ isContractor ? undefined : this.props.onRename }\r\n                />\r\n\r\n                { isProcessing || isContractor ? null :\r\n                    <Button onClick={ () => this.setDocumentState(DocumentState.Approved) }>Approve</Button>\r\n                }\r\n\r\n                { isProcessing || isContractor ? null :\r\n                    <Button onClick={ () => this.setDocumentState(DocumentState.Rejected) }>Reject</Button>\r\n                }\r\n\r\n                { !isProcessing || isContractor ? null :\r\n                    <Button onClick={ () => this.setDocumentState(DocumentState.None) }>Reset</Button>\r\n                }\r\n\r\n                <div className={ this.props.classes.tableContainer }>\r\n                    <Table className={ this.props.classes.table }>\r\n                        <colgroup>\r\n                            <col width=\"300px\"/>\r\n                            <col width=\"100%\"/>\r\n                        </colgroup>\r\n\r\n                        <TableBody>\r\n                            { Object.entries(this.props.data.fields).map(([name, field], idx) => (\r\n                                <FieldComponent\r\n                                    key={ idx }\r\n                                    fieldName={ name }\r\n                                    fieldData={ field }\r\n                                    onValueUpdate={ (newValue: string) => this.setDocumentFieldValue(field, newValue) }\r\n                                    onNameUpdate={ (newName: string) => this.setDocumentFieldName(field, newName) }\r\n                                />\r\n                            )) }\r\n                        </TableBody>\r\n                    </Table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private setDocumentFieldValue = (field: DocumentField, newValue: string): void => {\r\n        field.value = newValue;\r\n        this.props.onUpdate();\r\n    }\r\n\r\n    private setDocumentFieldName = (field: DocumentField, newName: string): void => {\r\n        if (field.type !== DocumentFieldType.Pdf && field.type !== DocumentFieldType.Image) return;\r\n        field.name = newName;\r\n        this.props.onUpdate();\r\n    }\r\n\r\n    private setDocumentState = (documentState: DocumentState.None | DocumentState.Approved | DocumentState.Rejected): void => {\r\n        this.props.data.setDocumentState(documentState);\r\n        this.props.onUpdate();\r\n    }\r\n\r\n}\r\n\r\nexport const DocumentMenu = withStyles(styles)(DocumentMenuRenderer);\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n    depth: number;\r\n    children: React.ReactNode;\r\n}\r\n\r\nfunction renderIndent(props: Props) {\r\n    return (\r\n        <div\r\n            style={ { paddingLeft: `${ 24 * props.depth }px`} }\r\n        >\r\n            { props.children }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Indent = renderIndent;\r\n","import { Button, createStyles, Menu, MenuItem, Theme, Typography, withStyles, WithStyles, IconButton } from \"@material-ui/core\";\r\nimport { Add, Delete } from \"@material-ui/icons\";\r\nimport React from \"react\";\r\nimport { DocumentData } from \"../../data/DocumentData\";\r\nimport { FolderData } from \"../../data/FolderData\";\r\nimport { UserData, UserType } from \"../../data/UserData\";\r\nimport { getTemplates, getSubmissionTypes, ALL_USERS } from \"../../network/MockService\";\r\nimport { DocumentLabel } from \"../DocumentLabel\";\r\nimport { Indent } from \"../folder-tree/Indent\";\r\nimport { FolderLabel } from \"../FolderLabel\";\r\nimport { HeaderLabel } from \"../HeaderLabel\";\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n    headerContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n\r\n    userTitleLabel: {\r\n        padding: '8px',\r\n    },\r\n\r\n    userContainer: {\r\n        width: '100%',\r\n        height: '36px',\r\n        overflowX: 'hidden',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n\r\n    userText: {\r\n        flexGrow: 1,\r\n        paddingLeft: '4px',\r\n        lineHeight: 1.5,\r\n        overflowX: 'hidden',\r\n        textOverflow: 'ellipsis',\r\n        whiteSpace: 'nowrap',\r\n        textAlign: 'left',\r\n        textTransform: 'none',\r\n    },\r\n\r\n    userDeleteIcon: {\r\n        height: '36px',\r\n        width: '36px',\r\n    },\r\n\r\n    parentLabel: {\r\n        flexGrow: 0,\r\n    },\r\n\r\n    labelSeperator: {\r\n        lineHeight: '36px',\r\n    },\r\n    \r\n});\r\n\r\ntype Props = WithStyles & {\r\n    data: FolderData;\r\n    user: UserData;\r\n    onSelect(document: FolderData | DocumentData | null): void;\r\n    onCreateProject(name: string): void;\r\n    onCreateFolder(parent: FolderData, name: string): void;\r\n    onCreateDocument(parent: FolderData, template: DocumentData): void;\r\n    onRenameDocument(document: DocumentData, newName: string): void;\r\n    onDeleteDocument(document: DocumentData): void;\r\n    onRenameFolder(document: FolderData, newName: string): void;\r\n    onDeleteFolder(folder: FolderData): void;\r\n    onAddUser(user: UserData): void;\r\n    onRemoveUser(user: UserData): void;\r\n};\r\n\r\nfunction renderFolderMenu(props: Props): React.ReactElement {\r\n    let children = props.data.children;\r\n    const depth: number = props.data.getDepth();\r\n    const isContractor: boolean = props.user.userType === UserType.Contractor;\r\n\r\n    if (depth === 0)\r\n        children = children.filter(child => child instanceof FolderData && child.getUsers().has(props.user));\r\n\r\n    return (\r\n        <div>\r\n            <HeaderLabel\r\n                data={ props.data }\r\n                onDelete={ isContractor || depth === 0 ? undefined : props.onDeleteFolder }\r\n                onSelect={ props.onSelect }\r\n                onRename={ isContractor || depth === 0 ? undefined : props.onRenameFolder }\r\n            />\r\n\r\n            { children.map((child, idx) => {\r\n                if (child instanceof DocumentData) {\r\n                    return (\r\n                        <Indent depth={ 1 } key={ idx }>\r\n                            <DocumentLabel\r\n                                data={ child }\r\n                                onClick={ () => props.onSelect(child) }\r\n                                onRename={ isContractor ? undefined : (newName) => props.onRenameDocument(child, newName) }\r\n                                onDelete={ isContractor ? undefined : () => props.onDeleteDocument(child) }\r\n                            />\r\n                        </Indent>\r\n                    )\r\n                } else {\r\n                    return (\r\n                        <Indent depth={ 1 } key={ idx }>\r\n                            <FolderLabel\r\n                                data={ child }\r\n                                onClick={ () => props.onSelect(child) }\r\n                                onRename={ isContractor || props.data.getDepth() !== 0 ? undefined : (newName) => props.onRenameFolder(child, newName) }\r\n                                onDelete={ isContractor || props.data.getDepth() === 1 ? undefined : () => props.onDeleteFolder(child) }\r\n                            />\r\n                        </Indent>\r\n                    );\r\n                }\r\n            }) }\r\n\r\n            { isContractor ? null : \r\n                <Indent depth={ 1 }>\r\n                    { RenderCreateButton(props) }\r\n                </Indent>\r\n            }\r\n\r\n            { isContractor ? null : RenderUsers(props) }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction RenderUsers(props: Props) {\r\n    const [menuAnchor, setMenuAnchor] = React.useState<HTMLElement | null>(null);\r\n\r\n    if (props.data.getDepth() !== 1) return null;\r\n\r\n    const users: UserData[] = Object.values(ALL_USERS).filter(user => !props.data.getUsers().has(user));\r\n\r\n    const menuOpen = (event: React.MouseEvent<HTMLElement>) => setMenuAnchor(event.currentTarget);\r\n    const menuClose = () => setMenuAnchor(null);\r\n    const menu = (\r\n        <Menu\r\n            anchorEl={menuAnchor}\r\n            keepMounted\r\n            open={Boolean(menuAnchor)}\r\n            onClose={menuClose}\r\n        >\r\n            { users.map((user, idx) => (\r\n                <MenuItem\r\n                    key={ idx }\r\n                    onClick={ () => {\r\n                        props.onAddUser(user);\r\n                        menuClose();\r\n                    } }\r\n                >\r\n                    { user.name }\r\n                </MenuItem>\r\n            )) }   \r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Typography className={ props.classes.userTitleLabel }>Users</Typography>\r\n            \r\n            { Array.from(props.data.getUsers()).map(user => (\r\n                <Indent depth={ 1 }>\r\n                    <div className={ props.classes.userContainer }>\r\n                        <Typography className={ props.classes.userText }>{ user.name }</Typography>\r\n                        { props.user === user ? null :\r\n                            <IconButton\r\n                                className={ props.classes.userDeleteIcon }\r\n                                onClick={ () => props.onRemoveUser(user) }\r\n                            >\r\n                                <Delete/>\r\n                            </IconButton>\r\n                        }\r\n                    </div>\r\n                </Indent>\r\n            )) }\r\n\r\n            <Indent depth={ 1 }>\r\n                <Button onClick={ menuOpen } disabled={ users.length === 0 }>\r\n                    <Add/>\r\n                    Add User\r\n                </Button>\r\n            </Indent>\r\n\r\n            { menu }\r\n        </>\r\n    );\r\n}\r\n\r\nfunction RenderCreateButton(props: Props) {\r\n    const [menuAnchor, setMenuAnchor] = React.useState<HTMLElement | null>(null);\r\n\r\n    let label: string = 'New Document';\r\n    let menuItems: string[] = [];\r\n    let onClick: (name: string) => void = (name: string) => props.onCreateFolder(props.data, name);\r\n\r\n    switch (props.data.getDepth()) {\r\n        case 0:\r\n            return (\r\n                <Button\r\n                    onClick={ () => props.onCreateProject('New Project') }\r\n                >\r\n                    <Add/>\r\n                    New Project\r\n                </Button>\r\n            );\r\n\r\n        case 1:\r\n            return null!;\r\n            \r\n        case 2:\r\n            label = 'New Submission Document';\r\n            menuItems = getSubmissionTypes().filter(folder => props.data.children.find(child => child.name === folder) === undefined);\r\n            break;\r\n            \r\n        case 3:\r\n            const templates: { [key: string]: DocumentData } = {};\r\n            getTemplates(props.data.parent!.name, props.data.name).forEach(template => templates[template.name] = template);\r\n            menuItems = Object.keys(templates);\r\n            onClick = (name: string) => props.onCreateDocument(props.data, templates[name]);\r\n            break;\r\n    }\r\n\r\n    if (menuItems.length === 0) return null!;\r\n\r\n    const menuOpen = (event: React.MouseEvent<HTMLElement>) => setMenuAnchor(event.currentTarget);\r\n    const menuClose = () => setMenuAnchor(null);\r\n    const menu = (\r\n        <Menu\r\n            anchorEl={ menuAnchor }\r\n            keepMounted\r\n            open={ Boolean(menuAnchor) }\r\n            onClose={ menuClose }\r\n        >\r\n            { menuItems.map((item, idx) => (\r\n                <MenuItem\r\n                    key={ idx }\r\n                    onClick={ () => {\r\n                        onClick(item);\r\n                        menuClose();\r\n                    } }\r\n                >\r\n                    { item }\r\n                </MenuItem>\r\n            )) }\r\n        </Menu>\r\n    );\r\n\r\n    return (\r\n        <>\r\n            <Button\r\n                onClick={ menuOpen }\r\n                disabled={ menuItems.length === 0 }\r\n            >\r\n                <Add/>\r\n                { label }\r\n            </Button>\r\n            { menu }\r\n        </>\r\n    )\r\n}\r\n\r\nexport const FolderMenu = withStyles(styles)(renderFolderMenu);\r\n","import { createStyles, Theme, WithStyles, withStyles, IconButton } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { DocumentData } from \"../../data/DocumentData\";\r\nimport { FolderData } from \"../../data/FolderData\";\r\nimport { UserData } from \"../../data/UserData\";\r\nimport { DocumentLabel } from \"../DocumentLabel\";\r\nimport { FolderLabel } from \"../FolderLabel\";\r\nimport { Indent } from \"./Indent\";\r\nimport { ExitToApp } from \"@material-ui/icons\";\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n    headerContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    \r\n    logoutButton: {\r\n        width: '36px',\r\n        height: '36px',\r\n    },\r\n\r\n});\r\n\r\ntype Props = WithStyles & {\r\n    data: FolderData;\r\n    user: UserData;\r\n    onSelect(selected: FolderData | DocumentData): void;\r\n    onLogout?(): void;\r\n}\r\n\r\nclass FolderRenderer extends React.Component<Props> {\r\n\r\n    public render() {\r\n\r\n        const depth: number = this.props.data.getDepth();\r\n\r\n        if (depth === 1 && !this.props.data.getUsers().has(this.props.user)) return null;\r\n\r\n        const isOpen: boolean = this.props.data.isOpen;\r\n\r\n        return (\r\n            <>\r\n                <Indent depth={ depth }>\r\n                    <div className={ this.props.classes.headerContainer }>\r\n                        <FolderLabel\r\n                            data={ this.props.data }\r\n                            onClick={ this.onFolderClick }\r\n                        />\r\n                        { depth !== 0 ? null :\r\n                            <IconButton\r\n                                className={ this.props.classes.logoutButton }\r\n                                onClick={ this.props.onLogout }\r\n                            >\r\n                                <ExitToApp/>\r\n                            </IconButton>\r\n                        }\r\n                    </div>\r\n                </Indent>\r\n\r\n                { !isOpen ? null : this.props.data.children.map((child, idx) => {\r\n                    if (child instanceof FolderData) {\r\n                        return (\r\n                            <FolderComponent\r\n                                key={ idx }\r\n                                data={ child }\r\n                                user={ this.props.user }\r\n                                onSelect={ this.props.onSelect }\r\n                            />\r\n                        );\r\n                    } else {\r\n                        return (\r\n                            <Indent key={ idx } depth={ depth + 1 }>\r\n                                <DocumentLabel\r\n                                    data={ child }\r\n                                    onClick={ () => this.props.onSelect(child) }\r\n                                />\r\n                            </Indent>\r\n                        );\r\n                    }\r\n                }) }\r\n            </>\r\n        );\r\n    }\r\n\r\n    private onFolderClick = (): void => {\r\n        this.props.data.toggleOpen();\r\n        this.forceUpdate();\r\n        this.props.onSelect(this.props.data);\r\n    }\r\n\r\n}\r\n\r\nexport const FolderComponent = withStyles(styles)(FolderRenderer);\r\n","import { createStyles, Theme, withStyles } from '@material-ui/core';\r\nimport { WithStyles } from '@material-ui/styles';\r\nimport React from 'react';\r\nimport { DocumentMenu } from '../component/document-menu/DocumentMenu';\r\nimport { FolderMenu } from '../component/folder-menu/FolderMenu';\r\nimport { FolderComponent } from '../component/folder-tree/FolderComponent';\r\nimport { DocumentData } from '../data/DocumentData';\r\nimport { FolderData } from '../data/FolderData';\r\nimport { UserData } from '../data/UserData';\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n  container: {\r\n    width: '100%',\r\n    height: '100%',\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n  },\r\n\r\n  foldertree: {\r\n    width: '300px',\r\n    height: '100%',\r\n    flexGrow: 0,\r\n    overflowY: \"scroll\",\r\n    scrollbarWidth: \"thin\",\r\n  },\r\n\r\n  body: {\r\n    width: 0,\r\n    flexGrow: 1,\r\n  },\r\n\r\n});\r\n\r\ntype Props = WithStyles<typeof styles> & {\r\n    root: FolderData;\r\n    user: UserData;\r\n    selected: FolderData | DocumentData | null;\r\n    onSelect(selected: FolderData | DocumentData | null): void;\r\n    rename(document: FolderData | DocumentData, newName: string): void;\r\n\r\n    createProject(name: string): void;\r\n    addFolderToFolder(parent: FolderData, name: string): void;\r\n    addDocumentToFolder(parent: FolderData, template: DocumentData): void;\r\n    deleteFolder(folder: FolderData): void;\r\n\r\n    deleteDocument(document: DocumentData): void;\r\n\r\n    addUser(user: UserData): void;\r\n    removeUser(user: UserData): void;\r\n\r\n    onDocumentUpdate(): void;\r\n    onLogout(): void;\r\n};\r\n\r\nfunction RenderFolderPage(props: Props) {\r\n    let body = null;\r\n\r\n    if (props.selected instanceof FolderData) {\r\n      body = (\r\n        <FolderMenu\r\n          data={ props.selected }\r\n          user={ props.user }\r\n          onSelect={ props.onSelect }\r\n          onCreateProject={ props.createProject }\r\n          onCreateFolder={ props.addFolderToFolder }\r\n          onCreateDocument={ props.addDocumentToFolder }\r\n          onRenameDocument={ props.rename }\r\n          onDeleteDocument={ props.deleteDocument }\r\n          onDeleteFolder={ props.deleteFolder }\r\n          onRenameFolder={ props.rename }\r\n          onAddUser={ props.addUser }\r\n          onRemoveUser={ props.removeUser }\r\n        />\r\n      );\r\n    } else if (props.selected instanceof DocumentData) {\r\n      body = (\r\n        <DocumentMenu\r\n          data={ props.selected }\r\n          user={ props.user }\r\n          onDelete={ props.deleteDocument }\r\n          onUpdate={ props.onDocumentUpdate }\r\n          onSelect={ props.onSelect }\r\n          onRename={ props.rename }\r\n        />\r\n      )\r\n    }\r\n\r\n    return (\r\n        <div className={ props.classes.container }>\r\n            <div className={ props.classes.foldertree }>\r\n                <FolderComponent\r\n                    data={ props.root }\r\n                    user={ props.user }\r\n                    onSelect={ props.onSelect }\r\n                    onLogout={ props.onLogout }\r\n                />\r\n            </div>\r\n\r\n            <div className={ props.classes.body }>\r\n                { body }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const FolderPage = withStyles(styles)(RenderFolderPage);\r\n","import { createStyles, Fab, TextField, Theme, Typography, WithStyles, withStyles } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n    container: {\r\n        height: '100%',\r\n        width: '100%',\r\n        margin: 'auto',\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        verticalAlign: 'middle',\r\n    },\r\n\r\n    padDiv: {\r\n        height: 0,\r\n        flexGrow: 1,\r\n    },\r\n\r\n    formContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n\r\n    title: {\r\n        textAlign: 'center',\r\n    },\r\n\r\n});\r\n\r\ntype Props = WithStyles<typeof styles> & {\r\n    onLogin(username: string, password: string): boolean;\r\n};\r\n\r\nconst RenderLogin = (props: Props): React.ReactElement => {\r\n\r\n    const [username, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isFailedLogin, setFailedLogin] = useState(false);\r\n\r\n    function tryLogin() {\r\n        if (props.onLogin(username, password)) return;\r\n        setUserName('');\r\n        setPassword('');\r\n        setFailedLogin(true);\r\n    }\r\n\r\n    return (\r\n        <div className={ props.classes.container }>\r\n\r\n            <div className={ props.classes.padDiv } />\r\n\r\n            <div className={ props.classes.formContainer }>\r\n                <Typography className={ props.classes.title } variant=\"h2\">\r\n                    BI App\r\n                </Typography>\r\n\r\n                <TextField\r\n                    label=\"Username\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    value={ username }\r\n                    onChange={ e => setUserName(e.currentTarget.value) }\r\n                />\r\n\r\n                <TextField\r\n                    label=\"Password\"\r\n                    type=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    value={ password }\r\n                    onChange={ e => setPassword(e.currentTarget.value) }\r\n                />\r\n\r\n                <Fab\r\n                    variant=\"extended\"\r\n                    size=\"large\"\r\n                    color={ isFailedLogin ? \"secondary\" : \"primary\" }\r\n                    onClick={ tryLogin }\r\n                >\r\n                    Login\r\n                </Fab>\r\n            </div>\r\n\r\n            <div className={ props.classes.padDiv } />\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport const LoginPage = withStyles(styles)(RenderLogin);\r\n","import { createStyles, Theme, withStyles } from \"@material-ui/core\";\nimport { WithStyles } from \"@material-ui/styles\";\nimport React, { ReactElement } from \"react\";\nimport { createFromTemplate, DocumentData } from \"./data/DocumentData\";\nimport { FolderData } from \"./data/FolderData\";\nimport { UserData } from \"./data/UserData\";\nimport { ALL_USERS, getUserFolder, saveData } from \"./network/MockService\";\nimport { FolderPage } from \"./page/FolderPage\";\nimport { LoginPage } from \"./page/LoginPage\";\n\nconst styles = (theme: Theme) => createStyles({\n\n  container: {\n    display: 'flex',\n    flexDirection: 'row',\n    height: '100vh',\n  },\n\n});\n\ntype Props = WithStyles<typeof styles> & {\n\n};\n\ntype State = {\n  user: UserData | null,\n  root: FolderData,\n  selected: FolderData | DocumentData | null,\n};\n\nclass MainComponent extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      user: null,\n      root: new FolderData(''),\n      selected: null,\n    };\n  }\n\n  public componentDidMount = () => {\n  }\n\n  private doLogin = (username: string, password: string): boolean => {\n    const user: UserData = ALL_USERS[username];\n    if (user === undefined) return false;\n\n    this.setState(prevState => {\n      const root = getUserFolder(user.name);\n      root.name = user.name;\n  \n      return {\n        user: user,\n        root: root,\n      };\n    });\n\n    return true;\n  }\n\n  private doLogout = (): void => {\n    this.setState({\n      user: null,\n      root: new FolderData(''),\n      selected: null,\n    });\n  }\n\n  private selectDocument = (selected: FolderData | DocumentData) => {\n    this.setState({ selected }, this.forceUpdate);\n  }\n\n  private renameDocument = (document: FolderData | DocumentData, newName: string) => {\n    document.name = newName;\n    this.onDocumentUpdate();\n  }\n\n  private createProject = (name: string): void => {\n    const project: FolderData = new FolderData(name);\n    project.addChild(new FolderData('Materials'));\n    project.addChild(new FolderData('Design'));\n    project.addChild(new FolderData('T&C'));\n    project.addUser(this.state.user!);\n\n    this.state.root.addChild(project);\n    this.onDocumentUpdate();\n  }\n\n  private addFolderToFolder = (parent: FolderData, name: string): void => {\n    parent.addChild(new FolderData(name));\n    this.onDocumentUpdate();\n  }\n\n  private addDocumentToFolder = (parent: FolderData, template: DocumentData): void => {\n    createFromTemplate(template, parent);\n    this.onDocumentUpdate();\n  }\n\n  private deleteFolder = (folder: FolderData): void => {\n    folder.delete();\n    this.setState(prevState => {\n      return prevState.selected === folder ? { selected: null } : null;\n    }, this.onDocumentUpdate);\n  }\n\n  private deleteDocument = (document: DocumentData): void => {\n    document.delete();\n    this.setState(prevState => {\n      return prevState.selected === document ? { selected: null } : null;\n    }, this.onDocumentUpdate);\n  }\n\n  private addUser = (user: UserData) => {\n    if (this.state.root.getUsers().has(user)) return;\n\n    this.state.root.addUser(user);\n    this.onDocumentUpdate();\n  }\n\n  private removeUser = (user: UserData) => {\n    if (!this.state.root.getUsers().has(user)) return;\n\n    this.state.root.removeUser(user);\n    this.onDocumentUpdate();\n    \n  }\n\n  private onDocumentUpdate = () => {\n    saveData(this.state.root);\n    this.forceUpdate();\n  }\n\n  public render = (): ReactElement => {\n    return (\n      <div className={ this.props.classes.container }>\n        { this.state.user === null ? \n          <LoginPage\n            onLogin={ this.doLogin }\n          />\n          :\n          <FolderPage\n            root={ this.state.root }\n            user={ this.state.user }\n            selected={ this.state.selected }\n            onSelect={ this.selectDocument }\n            rename={ this.renameDocument }\n            createProject={ this.createProject }\n            addFolderToFolder={ this.addFolderToFolder }\n            addDocumentToFolder={ this.addDocumentToFolder }\n            deleteFolder={ this.deleteFolder }\n            deleteDocument={ this.deleteDocument }\n            addUser={ this.addUser }\n            removeUser={ this.removeUser }\n            onDocumentUpdate={ this.onDocumentUpdate }\n            onLogout={ this.doLogout }\n          />\n        }\n      </div>\n    );\n  }\n\n}\n\nexport const Main = withStyles(styles)(MainComponent);\n","import { createMuiTheme } from '@material-ui/core';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Main } from './main';\n\ncreateMuiTheme();\nReactDOM.render(<BrowserRouter><Main /></BrowserRouter>, document.getElementById('root'));\n"],"sourceRoot":""}